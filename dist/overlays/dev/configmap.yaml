apiVersion: v1
kind: ConfigMap
metadata:
  name: graphstore-mem-alloc
  labels:
    app: graphstore
data:
  JAVA_XMS: 16g
  JAVA_XMX: 16g

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: graphstore-override
  labels:
    app: graphstore
data:
  RWStore.properties: |-
    com.bigdata.namespace.sauce.lex.ID2TERM.com.bigdata.btree.BTree.branchingFactor=2399
    com.bigdata.namespace.sauce.lex.TERM2ID.com.bigdata.btree.BTree.branchingFactor=1847
    com.bigdata.namespace.sauce.lex.com.bigdata.btree.BTree.branchingFactor=400
    com.bigdata.namespace.sauce.spo.SOPC.com.bigdata.btree.BTree.branchingFactor=2044
    com.bigdata.namespace.sauce.spo.PCSO.com.bigdata.btree.BTree.branchingFactor=1914
    com.bigdata.namespace.sauce.spo.OCSP.com.bigdata.btree.BTree.branchingFactor=2069
    com.bigdata.namespace.sauce.spo.CSPO.com.bigdata.btree.BTree.branchingFactor=1759
    com.bigdata.namespace.sauce.spo.SPOC.com.bigdata.btree.BTree.branchingFactor=1903
    com.bigdata.namespace.sauce.spo.POCS.com.bigdata.btree.BTree.branchingFactor=2031
    com.bigdata.namespace.sauce.spo.com.bigdata.btree.BTree.branchingFactor=1024

    com.bigdata.rdf.store.AbstractTripleStore.axiomsClass=com.bigdata.rdf.axioms.NoAxioms
    com.bigdata.rdf.store.AbstractTripleStore.justify=true
    com.bigdata.rdf.store.AbstractTripleStore.quads=true
    com.bigdata.rdf.store.AbstractTripleStore.statementIdentifiers=false
    com.bigdata.rdf.store.AbstractTripleStore.textIndex=true
    com.bigdata.rdf.store.AbstractTripleStore.geoSpatial=false

    com.bigdata.rdf.sail.isolatableIndices=false
    com.bigdata.rdf.sail.truthMaintenance=false
    com.bigdata.rdf.sail.namespace=sauce
    com.bigdata.rdf.sail.bufferCapacity=100000

    com.bigdata.journal.AbstractJournal.bufferMode=DiskRW
    com.bigdata.journal.AbstractJournal.readOnly=false
    com.bigdata.journal.AbstractJournal.file=/mnt/graphstore/blazegraph.jnl
    com.bigdata.journal.AbstractJournal.fileLockEnabled=false
    com.bigdata.journal.AbstractJournal.writeCacheBufferCount=0

    com.bigdata.journal.Journal.collectPlatformStatistics=true
    # com.bigdata.journal.Journal.collectQueueStatistics=false
    # com.bigdata.journal.Journal.ganglia.listen=false
    # com.bigdata.journal.Journal.ganglia.report=false
  override.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
      xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_1.xsd" 
    version="3.1">
      <display-name>Bigdata</display-name>
      <description>Bigdata</description>
      <context-param>
        <description>The property file (for a standalone database instance) or the
      jini configuration file (for a federation).  The file MUST end with either
      ".properties" or ".config".  This path is relative to the directory from
      which you start the servlet container so you may have to edit it for your
      installation, e.g., by specifying an absolution path.  Also, it is a good
      idea to review the RWStore.properties file as well and specify the location
      of the database file on which it will persist your data.

      Note: You MAY override this parameter using
      "-Dcom.bigdata.rdf.sail.webapp.ConfigParams.propertyFile=FILE"
      when starting the servlet container.
      </description>
        <!-- Note: This path is relative to the directory in which you start -->
        <!-- the servlet container or within the classpath as a resource.    -->
        <!-- For the IDE, this is generally the root  -->
        <!-- of the bigdata project. For the WAR, it depends where you start -->
        <!-- the servlet container. The "ant war" target rewrites this to be -->
        <!-- relative to the root of the servlet container by default.       -->
        <param-name>propertyFile</param-name>
        <param-value>/opt/sauce/RWStore.properties</param-value>
      </context-param>
      <context-param>
        <description>The default bigdata namespace of for the triple or quad store
      instance to be exposed.</description>
        <param-name>namespace</param-name>
        <param-value>sauce</param-value>
      </context-param>
      <context-param>
        <description>When true a new triple or quads store instance will be created
      if none is found at that namespace.</description>
        <param-name>create</param-name>
        <param-value>true</param-value>
      </context-param>
      <context-param>
        <description>The size of the thread pool used to service SPARQL queries -OR-
        ZERO (0) for an unbounded thread pool.</description>
        <param-name>queryThreadPoolSize</param-name>
        <param-value>0</param-value>
      </context-param>
      <context-param>
        <description>When true, the REST API will not permit mutation operations.</description>
        <param-name>readOnly</param-name>
        <param-value>false</param-value>
      </context-param>
      <context-param>
        <description>When non-zero, the timeout for queries (milliseconds).</description>
        <param-name>queryTimeout</param-name>
        <param-value>0</param-value>
      </context-param>
      <context-param>
        <description>When non-zero, the timeout for the warmup period (milliseconds). The warmup period pulls in the non-leaf index pages and reduces the impact of sudden heavy query workloads on the disk and on GC.  The end points are not available during the warmup period.</description>
        <param-name>warmupTimeout</param-name>
        <param-value>0</param-value>
      </context-param>
      <context-param>
        <description>A list of the namespaces to be exercised during the warmup period (optional).  When the list is empty, all namespaces will be warmed up.</description>
        <param-name>warmupNamespaceList</param-name>
        <param-value/>
      </context-param>
      <context-param>
        <description>The number of parallel threads to use for the warmup period.  At most one thread will be used per index.</description>
        <param-name>warmupThreadPoolSize</param-name>
        <param-value>200</param-value>
      </context-param>
      <!-- <context-param>
      <description>List of allowed services.</description>
      <param-name>serviceWhitelist</param-name>
      <param-value>http://www.bigdata.com/rdf/search#search,http://www.bigdata.com/rdf#describe</param-value>
      </context-param> -->
      <context-param>
        <description>The name of the class to use for the Blueprints Servlet instance</description>
        <param-name>blueprintsServletProvider</param-name>
        <param-value>com.bigdata.blueprints.webapp.BlueprintsServlet</param-value>
      </context-param>
      <listener>
        <listener-class>com.bigdata.rdf.sail.webapp.BigdataRDFServletContextListener</listener-class>
      </listener>
      <servlet>
        <servlet-name>REST API</servlet-name>
        <display-name>REST API</display-name>
        <description>The REST API, including a SPARQL end point, as described at
      https://wiki.blazegraph.com/wiki/index.php/NanoSparqlServer
      </description>
        <servlet-class>com.bigdata.rdf.sail.webapp.RESTServlet</servlet-class>
        <load-on-startup>0</load-on-startup>
        <async-supported>true</async-supported>
      </servlet>
      <servlet>
        <servlet-name>Multi-Tenancy API</servlet-name>
        <display-name>Multi-Tenancy API</display-name>
        <description>The REST API for managing multiple KBs in a single Journal
      or Federation.
      </description>
        <servlet-class>com.bigdata.rdf.sail.webapp.MultiTenancyServlet</servlet-class>
        <async-supported>true</async-supported>
      </servlet>
      <servlet>
        <servlet-name>DataLoader</servlet-name>
        <display-name>DataLoader Servlet</display-name>
        <description>Servlet providing DataLoader functionality for bulk loading into a namespace.</description>
        <servlet-class>com.bigdata.rdf.sail.webapp.DataLoaderServlet</servlet-class>
        <async-supported>true</async-supported>
      </servlet>
      <servlet>
        <servlet-name>Backup</servlet-name>
        <display-name>Backup Servlet</display-name>
        <description>Servlet providing a REST API for creating online backups.</description>
        <servlet-class>com.bigdata.rdf.sail.webapp.BackupServlet</servlet-class>
        <async-supported>true</async-supported>
      </servlet>
      <servlet>
        <servlet-name>Transaction Management API</servlet-name>
        <display-name>Transaction Management API</display-name>
        <description>The REST API for managing transactions for a Journal.
      </description>
        <servlet-class>com.bigdata.rdf.sail.webapp.TxServlet</servlet-class>
        <async-supported>true</async-supported>
      </servlet>
      <servlet>
        <servlet-name>Status</servlet-name>
        <display-name>Status</display-name>
        <description>A status page.</description>
        <servlet-class>com.bigdata.rdf.sail.webapp.StatusServlet</servlet-class>
        <async-supported>true</async-supported>
      </servlet>
      <servlet>
        <servlet-name>Counters</servlet-name>
        <display-name>Performance counters</display-name>
        <description>Performance counters.</description>
        <servlet-class>com.bigdata.rdf.sail.webapp.CountersServlet</servlet-class>
        <async-supported>true</async-supported>
      </servlet>
      <!-- Note: The HALoadBalancerServlet is deployed from override-web.xml -->
      <!-- Serve anything under /html/* as a simple file. -->
      <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>/html/*</url-pattern>
      </servlet-mapping>
      <!-- Mapping for the default KB namespace (as configured above). -->
      <servlet-mapping>
        <servlet-name>REST API</servlet-name>
        <url-pattern>/sparql</url-pattern>
      </servlet-mapping>
      <!-- Mapping for access to non-default KB namespaces.
      <servlet-mapping>
      <servlet-name>REST API</servlet-name>
      <url-pattern>/sparql/*</url-pattern>
      </servlet-mapping> -->
      <!-- Mappings for the multi-tenancy API. -->
      <servlet-mapping>
        <servlet-name>Multi-Tenancy API</servlet-name>
        <url-pattern>/namespace</url-pattern>
      </servlet-mapping>
      <servlet-mapping>
        <servlet-name>Multi-Tenancy API</servlet-name>
        <url-pattern>/namespace/*</url-pattern>
      </servlet-mapping>
      <!-- Mappings for the DataLoader Servlet API. -->
      <servlet-mapping>
        <servlet-name>DataLoader</servlet-name>
        <url-pattern>/dataloader</url-pattern>
      </servlet-mapping>
      <!-- Mappings for the Backup Servlet API. -->
      <servlet-mapping>
        <servlet-name>Backup</servlet-name>
        <url-pattern>/backup</url-pattern>
      </servlet-mapping>
      <!-- Mappings for the TX API. -->
      <servlet-mapping>
        <servlet-name>Transaction Management API</servlet-name>
        <url-pattern>/tx</url-pattern>
      </servlet-mapping>
      <servlet-mapping>
        <servlet-name>Transaction Management API</servlet-name>
        <url-pattern>/tx/*</url-pattern>
      </servlet-mapping>
      <!-- Mapping for the status page. -->
      <servlet-mapping>
        <servlet-name>Status</servlet-name>
        <url-pattern>/status</url-pattern>
      </servlet-mapping>
      <!-- Mapping for the performance counters page. -->
      <servlet-mapping>
        <servlet-name>Counters</servlet-name>
        <url-pattern>/counters</url-pattern>
      </servlet-mapping>
      <!-- Map the initial request into the UI. -->
      <welcome-file-list>
        <welcome-file>html/index.html</welcome-file>
      </welcome-file-list>
    </web-app>
