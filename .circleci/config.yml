###############################
# # # ZOOKEEPER CIRCLE CI # # #
###############################

version: 2.1

# 
# Workflows
# 
workflows:
  version: 2
  publish_deploy:
    jobs:
      - pre_deploy:
          type: approval
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - pre_deploy

# 
# Jobs
# 
jobs:
  deploy:
    executor: gcloud
    steps:
      - checkout
      - fingerprint
      - setup_remote_docker
      - dependencies
      - gcloud_auth:
          credentials: $GOOGLE_CREDENTIALS
          project_id: sauce-k8s--yak
          region: europe-west2
          ttl: 30m
      - gcloud_ssh_setup:
          ttl: 30m
      - gcloud_ssh:
          instance: bastion-instance
          zone: europe-west2-a
          script: |
            rm -rf zookeeper
            ssh -T github.com -o "StrictHostKeyChecking no"
            git clone git@github.com:sauce-consortia/zookeeper.git
            gcloud container clusters get-credentials sauce --region europe-west2
            kustomize build zookeeper/dist/overlays/dev | kubectl apply -f -



# 
# Executors
# 
executors:
  gcloud:
    docker:
      - image: google/cloud-sdk
        name: google_cloud_sdk
        environment:
          GIT_EMAIL: circleci@dneg.com
          GIT_NAME: CircleCI
          TAG: "$(cat ./VERSION)"
          TF_CLI: https://releases.hashicorp.com/terraform/0.12.19/terraform_0.12.19_linux_amd64.zip
          TF_ZIP: terraform_0.12.19_linux_amd64.zip
          TF_ENVIRONMENT: dev

# 
# Commands
# 
commands:
  fingerprint:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "83:4c:f7:38:44:bb:2b:76:da:ee:ea:86:24:20:39:86"
  dependencies:
    steps:
      - run: |
          # Install dependencies
          apt-get update
          apt -y install git dnsutils wget unzip
      - run: |
          # Set up SSH key forwarding to bastion
          sed -ie 's/# Host/Host/' /etc/ssh/ssh_config
          sed -ie 's/#   ForwardAgent/  ForwardAgent/' /etc/ssh/ssh_config
          sed -ie 's/  ForwardAgent no/  ForwardAgent yes/' /etc/ssh/ssh_config
          eval $(ssh-agent -s)
      - run: |
          # Install terraform CLI
          wget $TF_CLI && \
          unzip $TF_ZIP && \
          mv terraform /usr/local/bin/ && \
          rm $TF_ZIP
  # 
  # Docker commands
  # 
  docker_login:
    parameters:
      token:
        type: string
      hostname:
        type: string
    steps:
      - run: docker login -u _json_key  -p "<< parameters.token >>" https://<< parameters.hostname >>
  docker_build:
    parameters:
      hostname:
        type: string
      project_id:
        type: string
      image:
        type: string
      dockerfile_path:
        type: string
      context:
        type: string
        default: "."
    steps:
      - run: |
          docker build -t << parameters.hostname >>/<< parameters.project_id >>/<< parameters.image >>:$(cat VERSION) \
            -f << parameters.dockerfile_path >> \
            << parameters.context >>
  docker_push:
    parameters:
      hostname:
        type: string
      project_id:
        type: string
      image:
        type: string
    steps:
      - run: docker push << parameters.hostname>>/<< parameters.project_id >>/<< parameters.image >>:$(cat VERSION)

  # 
  # Git commands
  # 
  git_config:
    parameters:
      email:
        type: string
      author:
        type: string
    steps:
      - run: |
          git config user.email << parameters.email >> && git config user.name << parameters.author >>
          ssh-keyscan github.com >> ~/.ssh/known_hosts
  git_tag:
    parameters:
      when:
        type: string
        default: on_success
    steps:
      - run: 
          command: git tag -f "$(cat VERSION)"
          when: << parameters.when >>
  git_push_tags:
    steps:
      - run: git push -f --tags
  git_commit:
    parameters:
      message:
        type: string
      version_file:
        type: string
        default: VERSION
      env:
        type: string
        default: dev
      when:
        type: string
        default: on_success
    steps:
      - run: 
          command: |
            git add -A
            git diff-index --quiet HEAD || git commit -am "<< parameters.message >>"
          when: << parameters.when >>
  git_push:
    steps:
      - run: git push origin HEAD:master

  # 
  # Gcloud commands
  # 
  gcloud_auth:
    parameters:
      credentials:
        type: string
      project_id:
        type: string
      region:
        type: string
      ttl:
        type: string
        default: 30m
    steps:
      - run: |
          # Authorize service account with token
          echo << parameters.credentials >> | gcloud auth activate-service-account --key-file=-
          #  Set project config
          gcloud --quiet config set project << parameters.project_id >>
          gcloud --quiet config set compute/region << parameters.region >>
  gcloud_ssh_setup:
    parameters:
      ttl:
        type: string
    steps:
      - run: |
          # Generate public key for host
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
          # Generate config for ssh users
          gcloud --quiet compute config-ssh --force-key-file-overwrite
          # Add public SSH key to os-login (30m duration)
          gcloud compute os-login ssh-keys add --key-file ~/.ssh/google_compute_engine.pub --ttl << parameters.ttl >>
          # Allow AgentForward to bastion
          sed -ie 's/# Host */Host */' /etc/ssh/ssh_config
          sed -ie 's/#  ForwardAgent no/  ForwardAgent yes/' /etc/ssh/ssh_config
          sed -ie 's/#  ForwardAgent yes/  ForwardAgent yes/' /etc/ssh/ssh_config
  gcloud_ssh:
    parameters:
      instance:
        type: string
      zone:
        type: string
      script:
        type: string
        default: '# Completed SSH script'
    steps:
      - run: |
          # SSH to bastion instance
          gcloud compute ssh << parameters.instance >> --zone=<< parameters.zone >> -- -A \<< EOF
          # Run SSH script
          << parameters.script >>
          EOF
  gcloud_kubectl_auth:
    parameters:
      cluster_name:
        type: string
      region:
        type: string
    steps:
      - run: |
          # Authorize kubectl acccess to cluster
          gcloud container clusters get-credentials << parameters.cluster_name >> --region << parameters.region >>

  # 
  # Kubectl commands
  # 
  kubectl_apply:
    parameters:
      path:
        type: string
    steps:
      - run: kustomize build << parameters.path >> | kubectl apply -f -

  # 
  # Terraform command
  # 
  tf_init:
    parameters:
      env:
        type: string
    steps:
      - run: cd infra/env/<< parameters.env >> && terraform init
  tf_plan:
    parameters:
      env:
        type: string
    steps:
      - run: cd infra/env/<< parameters.env >> && terraform plan -out .terraform/plan -state=terraform.tfstate
  tf_apply:
    parameters:
      env:
        type: string
    steps:
      - run: cd infra/env/<< parameters.env >> && terraform apply -state=terraform.tfstate .terraform/plan 
  tf_destroy:
    parameters:
      env:
        type: string
    steps:
      - run: cd infra/env/<< parameters.env >> && terraform destroy -state=terraform.tfstate -auto-approve
  tf_plan_destroy:
    parameters:
      env:
        type: string
    steps:
      - run: cd infra/env/<< parameters.env >> && terraform plan -state=terraform.tfstate -destroy